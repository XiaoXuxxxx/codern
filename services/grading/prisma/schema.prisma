generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Testcase {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  filePath   String
  results    Result[]

  @@index([questionId])
}

enum Language {
  C
  CPP
}

model Submission {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  userId     String
  language   Language
  filePath   String
  uploadedAt Int      @db.UnsignedInt
  results    Result[]
}

enum ResultStatus {
  GRADING
  PASSED
  FAILED_COMPILATION
  FAILED_MISSING_RESULT
  TIMEOUT_EXECUTION
  TIMEOUT_CONTAINER
  REQUEUE_LIMIT_EXCEEDED
}

model Result {
  id           Int          @id @default(autoincrement())
  submission   Submission   @relation(fields: [submissionId], references: [id])
  submissionId Int
  testcase     Testcase     @relation(fields: [testcaseId], references: [id])
  testcaseId   Int
  status       ResultStatus
}

model Editor {
  userId     String
  questionId Int
  language   Language
  codePath   String
  savedAt    Int      @db.UnsignedInt

  @@id([userId, questionId, language])
}

model Question {
  id          Int          @id
  workspaceId Int
  score       Int
  memoryLimit Int
  timeLimit   Int
  testcase    Testcase[]
  submission  Submission[]

  @@index([workspaceId])
}
